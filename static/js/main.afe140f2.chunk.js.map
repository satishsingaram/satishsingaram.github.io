{"version":3,"sources":["intro.jsx","awards.jsx","App.js","serviceWorker.js","index.js"],"names":["Intro","react_default","a","createElement","dist_default","width","justifyContent","paddingLeft","flexDirection","style","border","padding","className","backgroundColor","Component","Awards","paddingBottom","class","index_es","icon","faAward","fixedWidth","color","routes","path","exact","sidebar","main","intro","awards","App","BrowserRouter","minHeight","alignItems","type","data-toggle","data-target","id","Link","to","href","map","route","index","Route","key","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afe140f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Flexbox from 'flexbox-react';\n\nclass Intro extends Component {\n\n    render() {\n            return (\n                <Flexbox  width=\"100%\" justifyContent= \"center\" paddingLeft=\"5em\" flexDirection=\"column\" style={{ border: '1px solid red' }}>\n                    <Flexbox padding=\"0\" style={{ border: '1px solid blue' }}>\n                        <div className=\"font-weight-bold\">SATISH SINGARAM</div>\n                    </Flexbox>\n                    <Flexbox  style={{ border: '1px solid gold' }}>\n                        CHENNAI - 600059 - TAMILNADU - INDIA - +91 9566247690 - satish.singaram@gmail.com\n                    </Flexbox>\n                    <Flexbox  justifyContent= \"left\" style={{ backgroundColor: '#fff' }}>\n                        Intro goes here\n                    </Flexbox>\n                </Flexbox>\n            )\n    }\n}\n\nexport default Intro;","import React, { Component } from 'react';\nimport Flexbox from 'flexbox-react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAward } from '@fortawesome/free-solid-svg-icons'\n\n\nclass Awards extends Component {\n\n    render() {\n            return (\n                <Flexbox width=\"100%\" justifyContent= \"center\" padding=\"5em\" flexDirection=\"column\" style={{ backgroundColor: '#fff' }}>\n                    <Flexbox justifyContent= \"left\" paddingBottom=\"25px\">\n                        <h2>AWARDS & CERTIFICATIONS</h2>\n                    </Flexbox>\n                    <Flexbox paddingLeft=\"25px\" justifyContent= \"left\">\n                       <ul class=\"list-unstyled\" >\n                        <li>\n                            <FontAwesomeIcon icon={faAward} fixedWidth style={{ color: 'gold' }}/> Google Analytics Certified Developer\n                        </li>\n                        <li>\n                            <FontAwesomeIcon icon={faAward} fixedWidth style={{ color: 'gold' }}/> Google Analytics Certified Developer\n                        </li>\n                       </ul>\n                    </Flexbox>\n                </Flexbox>\n            )\n    }\n}\n\nexport default Awards;","import React, { Component } from 'react';\nimport Flexbox from 'flexbox-react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Intro from './intro';\nimport Awards from './awards';\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    sidebar: () => <div>Intro</div>,\n    main: () => <Intro/>\n  },\n  {\n    path: \"/awards\",\n    sidebar: () => <div>Awards!</div>,\n    main: () => <Awards/>\n  }\n];\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Router>\n            <Flexbox flexDirection=\"column\" minHeight=\"100vh\">\n                <Flexbox>\n                  <Flexbox width=\"15vw\" justifyContent=\"center\" alignItems=\"center\">\n                         <nav class=\"navbar navbar-inverse\">\n                           <div class=\"container-fluid\">\n                             <div class=\"navbar-header\">\n                               <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\n                                 <span class=\"icon-bar\"></span>\n                                 <span class=\"icon-bar\"></span>\n                                 <span class=\"icon-bar\"></span>\n                               </button>\n\n                             </div>\n                             <div class=\"collapse navbar-collapse\" id=\"myNavbar\" >\n                               <ul class=\"nav navbar-nav\" >\n                                 <li style={{ width: \"150px\" }} ><Link to=\"/\" >Intro</Link></li>\n                                 <li style={{ width: \"150px\" }} ><a href=\"#\">Experience</a></li>\n                                 <li><a href=\"#\">Education</a></li>\n                                 <li><a href=\"#\">Skills</a></li>\n                                 <li style={{ width: \"150px\" }} ><a href=\"#\">Interests</a></li>\n                                 <li><Link to=\"/awards\">Awards</Link></li>\n                               </ul>\n                             </div>\n                           </div>\n                         </nav>\n\n\n                         {/* <div style={{ display: \"flex\" }}>\n                             <ul class=\"nav\">\n                               <li style={{border:'1px solid red' }} >\n                                 <Link to=\"/\" >Intro</Link>\n                               </li>\n                               <li class=\"nav-item\">\n                                 <Link to=\"/awards\">Awards</Link>\n                               </li>\n                             </ul>\n                         </div> */}\n\n                  </Flexbox>\n                  <Flexbox width=\"80vw\" justifyContent= \"center\" alignItems=\"center\">\n                   {routes.map((route, index) => (\n                      // You can render a <Route> in as many places\n                      // as you want in your app. It will render along\n                      // with any other <Route>s that also match the URL.\n                      // So, a sidebar or breadcrumbs or anything else\n                      // that requires you to render multiple things\n                      // in multiple places at the same URL is nothing\n                      // more than multiple <Route>s.\n                      <Route\n                        key={index}\n                        path={route.path}\n                        exact={route.exact}\n                        component={route.main}\n                      />\n                    ))}\n                  </Flexbox>\n                </Flexbox>\n            </Flexbox>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}