{"version":3,"sources":["intro.jsx","awards.jsx","App.js","serviceWorker.js","index.js"],"names":["Intro","react_default","a","createElement","dist_default","style","backgroundColor","width","Component","Awards","justifyContent","padding","flexDirection","paddingBottom","paddingLeft","class","index_es","icon","faAward","fixedWidth","color","routes","path","exact","sidebar","main","intro","awards","App","BrowserRouter","minHeight","flexGrow","alignItems","Nav","bsStyle","stacked","NavItem","href","title","map","route","index","Route","key","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAmBeA,mLAbH,OACIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASG,MAAO,CAAEC,gBAAiB,QAAUC,MAAM,QAE/CN,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,+CAPAK,6BC0BLC,mLApBH,OACIR,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASK,MAAM,OAAOG,eAAgB,SAASC,QAAQ,MAAMC,cAAc,SAASP,MAAO,CAAEC,gBAAiB,SAC1GL,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASQ,eAAgB,OAAOG,cAAc,QAC1CZ,EAAAC,EAAAC,cAAA,sCAEJF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASY,YAAY,OAAOJ,eAAgB,QACzCT,EAAAC,EAAAC,cAAA,MAAIY,MAAM,iBACTd,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAiBC,KAAMC,IAASC,YAAU,EAACd,MAAO,CAAEe,MAAO,UAD/D,yCAGAnB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAiBC,KAAMC,IAASC,YAAU,EAACd,MAAO,CAAEe,MAAO,UAD/D,mDAbHZ,+BCCfa,EAAS,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,QAAS,kBAAMvB,EAAAC,EAAAC,cAAA,qBACfsB,KAAM,kBAAMxB,EAAAC,EAAAC,cAACuB,EAAD,QAEd,CACEJ,KAAM,UACNE,QAAS,kBAAMvB,EAAAC,EAAAC,cAAA,uBACfsB,KAAM,kBAAMxB,EAAAC,EAAAC,cAACwB,EAAD,SA6CDC,mLAtCP,OACI3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACA5B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASU,cAAc,SAASkB,UAAU,SACtC7B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAS6B,SAAU,GACjB9B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASK,MAAM,OAAOF,MAAO,CAAEC,gBAAiB,WAAaI,eAAgB,SAASsB,WAAW,UAC1F/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAKC,QAAQ,QAAQC,SAAO,GACZlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAASC,KAAK,IAAIC,MAAM,QAAxB,2BAGArC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAASC,KAAK,UAAUC,MAAM,QAA9B,YAKvBrC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAASK,MAAM,OAAOG,eAAgB,SAASsB,WAAW,UACxDX,EAAOkB,IAAI,SAACC,EAAOC,GAAR,OAQTxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CACEC,IAAKF,EACLnB,KAAMkB,EAAMlB,KACZC,MAAOiB,EAAMjB,MACbqB,UAAWJ,EAAMf,oBA9BvBjB,aCTEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ded62aa4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Flexbox from 'flexbox-react';\n\nclass Intro extends Component {\n\n    render() {\n            return (\n                <Flexbox style={{ backgroundColor: '#fff' }} width=\"100%\" >\n\n                    <h1>This is work in Progress !</h1>\n                    <p>\n                        Place holder Intro Content\n                    </p>\n\n                </Flexbox>\n            )\n    }\n}\n\nexport default Intro;","import React, { Component } from 'react';\nimport Flexbox from 'flexbox-react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAward } from '@fortawesome/free-solid-svg-icons'\n\n\nclass Awards extends Component {\n\n    render() {\n            return (\n                <Flexbox width=\"100%\" justifyContent= \"center\" padding=\"5em\" flexDirection=\"column\" style={{ backgroundColor: '#fff' }}>\n                    <Flexbox justifyContent= \"left\" paddingBottom=\"25px\">\n                        <h2>AWARDS & CERTIFICATIONS</h2>\n                    </Flexbox>\n                    <Flexbox paddingLeft=\"25px\" justifyContent= \"left\">\n                       <ul class=\"list-unstyled\" >\n                        <li>\n                            <FontAwesomeIcon icon={faAward} fixedWidth style={{ color: 'gold' }}/> Google Analytics Certified Developer\n                        </li>\n                        <li>\n                            <FontAwesomeIcon icon={faAward} fixedWidth style={{ color: 'gold' }}/> Google Analytics Certified Developer\n                        </li>\n                       </ul>\n                    </Flexbox>\n                </Flexbox>\n            )\n    }\n}\n\nexport default Awards;","import React, { Component } from 'react';\nimport Flexbox from 'flexbox-react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Intro from './intro';\nimport Awards from './awards';\nimport { Nav, NavItem } from 'react-bootstrap';\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    sidebar: () => <div>Intro</div>,\n    main: () => <Intro/>\n  },\n  {\n    path: \"/awards\",\n    sidebar: () => <div>Awards!</div>,\n    main: () => <Awards/>\n  }\n];\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Router>\n            <Flexbox flexDirection=\"column\" minHeight=\"100vh\">\n                <Flexbox flexGrow={1}>\n                  <Flexbox width=\"20vw\" style={{ backgroundColor: '#bd5d38' }} justifyContent= \"center\" alignItems=\"center\">\n                         <Nav bsStyle=\"pills\" stacked >\n                                         <NavItem href=\"/\" title=\"Item\">\n                                           Introduction to History\n                                         </NavItem>\n                                         <NavItem href=\"/awards\" title=\"Item\">\n                                           Awards\n                                         </NavItem>\n                                       </Nav>\n                  </Flexbox>\n                  <Flexbox width=\"80vw\" justifyContent= \"center\" alignItems=\"center\">\n                   {routes.map((route, index) => (\n                      // You can render a <Route> in as many places\n                      // as you want in your app. It will render along\n                      // with any other <Route>s that also match the URL.\n                      // So, a sidebar or breadcrumbs or anything else\n                      // that requires you to render multiple things\n                      // in multiple places at the same URL is nothing\n                      // more than multiple <Route>s.\n                      <Route\n                        key={index}\n                        path={route.path}\n                        exact={route.exact}\n                        component={route.main}\n                      />\n                    ))}\n                  </Flexbox>\n                </Flexbox>\n            </Flexbox>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}